conf:
  package_name: prolo2009
  client_rule_lib: simcity
  server_rule_lib: simcity
  player_lib: champion
  player_filename: prologin

constant:
  - doc_extra: \subsection{Constantes}
  - doc_extra: \subsubsection{Les codes d'erreur}
  - 
    cst_name: INFINI
    cst_val: 30000
    cst_comment: Renvoyé par cout_achat_maison lorsque vous ne pouvez plus construire de maison pour le tour courant.
  - 
    cst_name: HORS_TERRAIN
    cst_val: -12
    cst_comment: Les coordonnées (x,y) avec lesquelles vous avec appelé une fonction sont hors des bornes du terrain.
  -
    cst_name: PAS_DE_MAISON
    cst_val: -2
    cst_comment: Il n'y a pas de maison à la case indiquée.
  -
    cst_name: PAS_DE_MONUMENT
    cst_val: -3
    cst_comment: Il n'y a pas de monument à la case indiquée.
  -
    cst_name: FINANCES_DEPASSEES
    cst_val: -4
    cst_comment: Vous voulez dépenser plus d'argent que vous n'avez, ou vous ne pouvez plus construire de maison ce tour-ci.
  -
    cst_name: BLOCAGE
    cst_val: -5
    cst_comment: Un blocage intervient lorsqu'aucune route n'est accessible par rapport à l'extérieur du jeu. Ce code d'erreur indique que le jeu serait bloqué si vous construisiez une maison ou un monument en (x,y).
  -
    cst_name: JOUEUR_INCORRECT
    cst_val: -7
    cst_comment: Le numéro de joueur donné est incorrect.
  -
    cst_name: NON_CONNEXE
    cst_val: -8
    cst_comment: La case indiquée n'est pas adjacente à une route (pour la 4-connexité si vous voulez construire une route, et pour la 8-connexité si vous voulez construire un bâtiment).
  -
    cst_name: CASE_OCCUPEE
    cst_val: -9
    cst_comment: La case indiquée est déjà occupée.
  -
    cst_name: ACTION_INTERDITE
    cst_val: -10
    cst_comment: Ce n'est pas votre tour, ou l'action demandée est interdite.
  -
    cst_name: TROP_LOIN
    cst_val: 50
    cst_comment: La distance demandée est strictement supérieure à MAX_DISTANCE.
  -
    cst_name: SUCCES
    cst_val: 0
    cst_comment: L'action s'est déroulée avec succès.

  - doc_extra: \subsubsection{Les constantes de possession}
  -
    cst_name: MAIRIE
    cst_val: 3
    cst_comment: La case ou la bâtiment est possédée par la mairie.

  - doc_extra: \subsubsection{Les constantes de terrain}
  -
    cst_name: VIDE
    cst_val: 0
    cst_comment: Case de terrain vide.
  -
    cst_name: MAISON
    cst_val: 1
    cst_comment: Case de terrain qui contient une maison.
  -
    cst_name: RESERVATION
    cst_val: 2
    cst_comment: Case de terrain réservée.
  -
    cst_name: MONUMENT
    cst_val: 3
    cst_comment: Case de terrain qui contient un monument.
  -
    cst_name: ROUTE
    cst_val: 4
    cst_comment: Case de terrain qui contient une route.

  - doc_extra: \subsubsection{Bornes, tailles}
  -
    cst_name: MAX_MONUMENTS
    cst_val: 14
    cst_comment: Nombre de monuments qui seront mis aux enchères.
  -
    cst_name: TAILLE_CARTE
    cst_val: 100
    cst_comment: La taille de la carte, en hauteur et en largeur.
  -
    cst_name: MAX_DISTANCE
    cst_val: 12
    cst_comment: Distance maximale qui peut être calculée.

function:
  - doc_extra: |
     \subsection{Fonctions d'information}
     Toutes ses fonctions peuvent renvoyer la constante HORS_TERRAIN quand
     leurs arguments sont incorrects.
     Ces fonctions prennent en comptent toutes les actions que vous avez déjà effectuées
     au cours de votre tour de jeu.
  -
    fct_name: type_case
    fct_summary: Renvoie le type de la case, VIDE, MAISON, ROUTE, MONUMENT ou RESERVATION.
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: valeur_case
    fct_summary: Renvoie la valeur de la case, c'est-à-dire la somme des prestiges des monuments qui ont cette case dans leur portée.
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: appartenance
    fct_summary: Renvoie l'entité possédant la case, 0, 1, 2 ou MAIRIE si la case est une maison ou une réservation, et MAIRIE sinon.
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: type_monument
    fct_summary: Renvoie le numéro d'un monument sur une case donnée, ou PAS_DE_MONUMENT.
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: portee_monument
    fct_summary: Renvoie la portée d'un monument.
    fct_ret_type: int
    fct_arg:
      - [num_monument, int, le numéro du monument]
  -
    fct_name: prestige_monument
    fct_summary: Renvoie le prestige d'un monument
    fct_ret_type: int
    fct_arg:
      - [num_monument, int, le numéro d'un monument]
  -
    fct_name: numero_tour
    fct_summary: Renvoie le numéro du tour
    fct_ret_type: int
  -
    fct_name: commence
    fct_summary: Numéro du joueur qui commence lors de la phase 1. Si cette fonction est appelée pendant une phase 2 ou 3, renoie le numéro du joueur qui commencera lors de la phase 1 du tour suivant.
    fct_ret_type: int
  -
    fct_name: montant_encheres
    fct_summary: Donne le montant de la dernière enchère effectuée par un joueur. Renvoie 0 au premier tour.
    fct_ret_type: int
    fct_arg:
      - [num_joueur, int, le numéro du joueur]
  -
    fct_name: score
    fct_summary: Donne le score d'un joueur.
    fct_ret_type: int
    fct_arg:
      - [num_joueur, int, le numéro du joueur]
  -
    fct_name: finances
    fct_summary: Donne l'argent possédé par un joueur
    fct_ret_type: int
    fct_arg:
      - [num_joueur, int, le numéro du joueur]
  -
    fct_name: monument_en_cours
    fct_summary: Donne le numéro du monument le plus récemment mis aux enchères. Renvoie PAS_DE_MONUMENT lors de la phase 1 du premier tour.
    fct_ret_type: int
  -
    fct_name: distance
    fct_summary: Renvoie la distance minimale pour aller de (x1,y1) à (x2,y2). Lors du calcul de cette distance, seules les cases vides, les cases contenant une route, et les cases étant réservée par votre champion sont considérées comme franchissables. Si le résultat est supérieur strictement à MAX_DISTANCE, la fonction renvoie TROP_LOIN. Le coût d'un appel à cette fonction est nul.
    fct_ret_type: int
    fct_arg:
      - [x1, int, la colonne du premier point]
      - [y1, int, la ligne du premier point]
      - [x2, int, la colonne du second point]
      - [y2, int, la ligne du second point]
  -
    fct_name: route_possible
    fct_summary: Indique si vous pouvez construire une route en (x,y). Si non, renvoie HORS_TERRAIN, CASE_OCCUPEE ou NON_CONNEXE.
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: construction_possible
    fct_summary: Indique si vous pouvez construire une maison ou un monument en (x,y). Si non, renvoie HORS_TERRAIN, CASE_OCCUPEE, BLOCAGE ou NON_CONNEXE.
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: cout_achat_maison
    fct_summary: Renvoie le coût d'achat d'une maison (ou INFINI si vous ne pouvez plus en construire pour ce tour).
    fct_ret_type: int
  -
    fct_name: cout_achat_route
    fct_summary: Renvoie le coût d'achat d'une route.
    fct_ret_type: int
  -
    fct_name: mon_tour
    fct_summary: Indique si votre champion doit jouer ou non. Si cette fonction renvoie false, votre champion ne pourra effectuer aucune action.
    fct_ret_type: bool

  - doc_extra: |
     \subsection{Fonctions d'action}
     Toutes les fonctions peuvent renvoyer la constante
     \textbf{HORS_TERRAIN} quand les coordonnées en entrée sont invalides.
  -
    fct_name: construire_route
    fct_summary: Construit si possible une route en (x,y). Si impossible, renvoie ACTION_INTERDITE, FINANCES_DEPASSEES, NON_CONNEXE ou CASE_OCCUPEE.
    fct_ret_type: int
    fct_arg:
    - [x, int, la colonne]
    - [y, int, la ligne]
  -
    fct_name: construire_maison
    fct_summary: Construit si possible une maison en (x,y). Si impossible, renvoie ACTION_INTERDITE, FINANCES_DEPASSEES, NON_CONNEXE, BLOCAGE ou CASE_OCCUPEE.
    fct_ret_type: int
    fct_arg:
    - [x, int, la colonne]
    - [y, int, la ligne]
  -
    fct_name: reserver_case
    fct_summary: Réserve la case (x,y). Si impossible, renvoie ACTION_INTERDITE, FINANCES_DEPASSEES, NON_CONNEXE, BLOCAGE ou CASE_OCCUPEE.
    fct_ret_type: int
    fct_arg:
    - [x, int, la colonne]
    - [y, int, la ligne]
  -
    fct_name: detruire_maison
    fct_summary: Détruit la maison en (x,y). Si impossible, renvoie ACTION_INTERDITE, FINANCES_DEPASSEES ou PAS_DE_MAISON.
    fct_ret_type: int
    fct_arg:
    - [x, int, la colonne]
    - [y, int, la ligne]
  -
    fct_name: vendre_maison
    fct_summary: Vend la maison en (x,y). Si impossible, renvoie ACTION_INTERDITE ou PAS_DE_MAISON.
    fct_ret_type: int
    fct_arg:
    - [x, int, la colonne]
    - [y, int, la ligne]
  -
    fct_name: encherir
    fct_summary: Place une enchère. Renvoie ACTION_INTERDITE ou FINANCES_DEPASSEES si impossible.
    fct_ret_type: int
    fct_arg:
    - [montant, int, Le montant de votre enchère]
  -
    fct_name: construire_monument
    fct_summary: Construit un monument en (x,y). Si impossible, renvoie ACTION_INTERDITE, NON_CONNEXE, BLOCAGE ou CASE_OCCUPEE.
    fct_ret_type: int
    fct_arg:
    - [x, int, la colonne]
    - [y, int, la ligne]

user_function:
  - doc_extra: |-
     \subsection{Ce qu'il faut faire}
     Chacun est libre de mener la stratégie qui lui semble la plus
     adaptée, et a entière liberté sur la façon de l'implémenter.
     Toutefois il est demandé d'écrire deux fonctions en particulier :
     une fonction qui sera appelée au début de la partie, et une autre
     qui sera appelée à chaque tour. TODO
