conf:
  package_name: prolo2011
  client_rule_lib: tron
  server_rule_lib: tron
  player_lib: champion
  player_filename: prologin

constant:
  - doc_extra: \subsection{Constantes}
  -
    cst_name: TAILLE_TERRAIN
    cst_val: 50
    cst_comment: Taille du terrain
  -
    cst_name: FIN_PARTIE
    cst_val: 1500
    cst_comment: Nombre de tours par partie
  -
    cst_name: MAX_PA
    cst_val: 3
    cst_comment: "Nombre de points d'action par tour"
  -
    cst_name: TAILLE_TRAINEE
    cst_val: 900
    cst_comment: Taille des traînées de moto
  -
    cst_name: MAX_ALLONGEMENT
    cst_val: 5
    cst_comment: "Longueur maximale de l'allongement"
  -
    cst_name: AJOUT_PA
    cst_val: 5
    cst_comment: "Nombre de points d'action à rajouter avec bonus"

enum:
  - doc_extra: \subsection{Énumérations}
  -
    enum_name: erreur
    enum_summary:
      "Énumération représentant une erreur renvoyée par une des fonctions
      d'action"
    enum_field:
      - [ok, "aucune erreur n'est survenue"]
      - [id_invalide, identifiant invalide]
      - [position_invalide, la position spécifiée est invalide]
      - [plus_de_pa, "vous n'avez pas assez de points d'action"]
      - [bonus_invalide, "vous n'avez pas ce bonus"]
      - [pas_a_toi, "l'unité n'est pas a vous"]

  -
    enum_name: type_case
    enum_summary: Énumération représentant les différents types de case
    enum_field:
      - [vide, "rien n'est présent sur la case"]
      - [obstacle, cette case est inaccessible]
      - [bonus, "cette case cotient un bonus"]
      - [point_croisement, point de croisement de traînées]
      - [source, source ou consommateur d'energie]

  -
    enum_name: type_bonus
    enum_summary: Énumération représentant les différents types de bonii
    enum_field:
      - [pas_bonus, "ceci n'est pas un bonus :-)"]
      -
        - bonus_croisement
        - "bonus permettant de croiser deux traînées de moto sur une case"
      - [plus_long, "bonus permettant d'agrandir une traînée de moto"]
      - [plus_pa, "bonus permettant d'avoir plus de points d'action"]
      -
        - bonus_regeneration
        - "bonus permettant de regenerer une source d'energie"

struct:
  - doc_extra: \subsection{Structures}
  -
    str_name: position
    str_summary: Représente une position sur le terrain du jeu
    str_tuple: yes
    str_field:
      - [x, int, coordonnée en X]
      - [y, int, coordonnée en Y]
  -
    str_name: source_energie
    str_summary: "Caracteristiques d'une source d'énergie"
    str_tuple: no
    str_field:
      - [id, int, "identifiant de la source d'énergie"]
      - [pos, position, "position de la source d'énergie"]
      -
        - coef
        - int
        -
          "coefficient representant les points d'énergie que la source va
          vous apporter"
  -
    str_name: trainee_moto
    str_summary: Représente une traînée de moto sur le terrain
    str_tuple: no
    str_field:
      - [id, int, identifiant de la traînee]
      -
        - emplacement
        - position array
        - position de chaque composant de la traînée de moto
      -
        - team
        - int
        - "identifiant de l'équipe qui possède cette traînée de moto"
function:
  - doc_extra: |
     "\subsection{Fonctions d'information}"
  -
    fct_name: mon_equipe
    fct_summary: Retourne le numéro de votre équipe
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: scores
    fct_summary: Retourne les scores de chaque équipe
    fct_ret_type: int array
    fct_arg: []
  -
    fct_name: nombre_equipes
    fct_summary: "Retourne le nombre d'équipes sur le terrain"
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: tour_actuel
    fct_summary: Retourne le numéro du tour actuel
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: sources_energie
    fct_summary: "Retourne la liste des sources d'énergie"
    fct_ret_type: source_energie array
    fct_arg: []
  -
    fct_name: trainees_moto
    fct_summary: Retourne la liste des traînées de moto
    fct_ret_type: trainee_moto array
    fct_arg: []

  -
    fct_name: regarder_type_case
    fct_summary: "Retourne le type d'une case"
    fct_ret_type: type_case
    fct_arg:
      - [pos, position, position de la case]

  -
    fct_name: regarder_type_bonus
    fct_summary: "Retourne le type de bonus d'une case"
    fct_ret_type: type_bonus
    fct_arg:
      - [pos, position, position de la case]

  -
    fct_name: regarder_bonus
    fct_summary: "Retourne la liste des bonus d'une équipe"
    fct_ret_type: type_bonus array
    fct_arg:
      - [equipe, int, "identifiant de l'équipe visée"]

  -
    fct_name: chemin
    fct_summary: "Renvoie le chemin le plus court entre deux points (fonction lente)"
    fct_ret_type: position array
    fct_arg:
      - [p1, position, "position de départ"]
      - [p2, position, "position d'arrivée"]

  - doc_extra: |
     "\subsection{Fonctions d'action}"
  -
    fct_name: deplacer
    fct_summary: Déplace une moto
    fct_ret_type: erreur
    fct_arg:
    - [id, int, identifiant de la moto à déplacer]
    - [de, position, "position de l'extrémité que l'on déplace"]
    - [vers, position, nouvelle position pour cette extrémité]
  -
    fct_name: couper_trainee_moto
    fct_summary:
      Coupe une traînée de moto en deux nouvelles traînées. « entre »
      et « et » doivent être deux positions adjacentes occupées par une
      même traînée de moto.
    fct_ret_type: erreur
    fct_arg:
    - [id, int, identifiant de la traînée de moto à couper]
    - [entre, position, nouvelle extrémité de la première traînée de moto]
    - [et, position, nouvelle extrémité de la deuxième traînée de moto]

  -
    fct_name: cancel
    fct_summary: "Annuler l'action précédente"
    fct_ret_type: erreur
    fct_arg: []

  -
    fct_name: enrouler
    fct_summary: Enrouler la traînée de moto en un point
    fct_ret_type: erreur
    fct_arg:
    - [id, int, identifiant de la traînée de moto à enrouler]
    - [point, position, point sur lequel enrouler la moto]

  -
    fct_name: regenerer_source_energie
    fct_summary: Régénère une source d'énergie à son maximal
    fct_ret_type: erreur
    fct_arg:
    - [id, int, identifiant de la source d'énergie à regénérer]
  -
    fct_name: allonger_pa
    fct_summary: "Allonge le tour en rajoutant des points d'action"
    fct_ret_type: erreur
    fct_arg: []

  -
    fct_name: agrandir_trainee_moto
    fct_summary:
      "Allonge une traînée de moto. L'allongement se fera aux prochains
      déplacements. La longueur du prolongement doit être comprise entre 0
      et MAX_ALLONGEMENT (inclus)."
    fct_ret_type: erreur
    fct_arg:
    - [id, int, identifiant de la traînée de moto à allonger]
    - [longueur, int, longueur du prolongement]

  -
    fct_name: poser_point_croisement
    fct_summary:
      Pose un point de croisement sur une case du terrain. La case doit ne pas
      déjà être un point de croisement.
    fct_ret_type: erreur
    fct_arg:
    -
      - point
      - position
      - position de la case sur laquelle poser le point de croisement

  -
    fct_name: fusionner
    fct_summary:
      Fusionner deux traînées de moto. Les deux doivent appartenir à la
      même équipe, mais doivent être deux traînées distinctes. « pos1 »
      et « pos2 » doivent être adjacentes et occupées respectivement par
      « id1 » et « id2 ».
    fct_ret_type: erreur
    fct_arg:
    - [id1, int, identifiant de la première traînée]
    - [pos1, position, extrémité à fusionner de la première traînée]
    - [id2, int, identifiant de la seconde traînée]
    - [pos2, position, extrémité à fusionner de la seconde traînée]

user_function:
  -
    fct_name: init_game
    fct_summary: Fonction appellée au début de la partie
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: jouer
    fct_summary: Fonction appellée pour la phase de jeu
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: end_game
    fct_summary: Fonction appellée à la fin de la partie
    fct_ret_type: void
    fct_arg: []

infos:
  -
    fct_name: sources_energie
    fct_arg: []
  -
    fct_name: trainees_moto
    fct_arg: []
  -
    fct_name: scores
    fct_arg: []
