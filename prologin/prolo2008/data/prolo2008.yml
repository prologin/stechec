conf:
  package_name: prolo2008
  client_rule_lib: robotus
  server_rule_lib: robotus
  player_lib: champion
  player_filename: prologin

constant:
  - doc_extra: \subsection{Constantes}
  - doc_extra: \subsubsection{Les codes d'erreur}
  - 
    cst_name: BAD_ARGUMENT
    cst_val: -1
    cst_comment: Un des arguments passes a la fonction est incorrect.
  -
    cst_name: TOO_MANY_ORDERS
    cst_val: -2
    cst_comment: Vous avez envoye trop d'ordres a votre hamster.
  -
    cst_name: SUCCESS
    cst_val: 0
    cst_comment: La commande s'est correctement effectuee.
  -
    cst_name: INFINI
    cst_val: 10000
    cst_comment: La distance est infinie
  - doc_extra: \subsubsection{Les constantes de terrain}
  -
    cst_name: NORMAL
    cst_val: 0
    cst_comment: Case de terrain qui n'est ni une tranchee, ni un obstacle
  -
    cst_name: TRANCHEE
    cst_val: 1
    cst_comment: Tranchee du terrain
  -
    cst_name: OBSTACLE
    cst_val: 2
    cst_comment: Obstacle du terrain
  - doc_extra: \subsubsection{Les constantes de directions}
  -
    cst_name: HAUT
    cst_val: 0
    cst_comment: Vers le haut
  -
    cst_name: GAUCHE
    cst_val: 1
    cst_comment: Vers la gauche
  -
    cst_name: BAS
    cst_val: 2
    cst_comment: Vers le bas
  -
    cst_name: DROITE
    cst_val: 3
    cst_comment: Vers la droite
  -
    cst_name: ICI
    cst_val: 4
    cst_comment: Cette constante n'est utilisee que pour la fonction lacher\_pomme

function:
  - doc_extra: |
     \subsection{Fonctions d'information}
     Toutes les fonctions peuvent renvoyer les constantes
     \textbf{BAD_ARGUMENT} quand au moins un des
     arguments est incorrect (meme si cela n'est pas precise pour chaque
     fonction). Par exemple, cela se produit si vous appelez
     la fonction \texttt{type_case} avec \texttt{x=13} et \texttt{y=5142}.
  -
    fct_name: taille_carte_x
    fct_summary: Renvoie la largeur de la carte
    fct_ret_type: int
  -
    fct_name: taille_carte_y
    fct_summary: Renvoie la hauteur de la carte
    fct_ret_type: int
  -
    fct_name: numero_tour
    fct_summary: Renvoie le numero du tour
    fct_ret_type: int
  -
    fct_name: nombre_tours
    fct_summary: Renvoie le nombre de tours d'une partie
    fct_ret_type: int
  -
    fct_name: commence
    fct_summary: Fonction pour savoir si on joue en premier ce tour-ci
    fct_ret_type: bool
  -
    fct_name: pos_x
    fct_summary: Renvoie la position x du hamster id
    fct_ret_type: int
    fct_arg:
      - [id, int, id du hamster]
  -
    fct_name: pos_y
    fct_summary: Renvoie la position y du hamster id
    fct_ret_type: int
    fct_arg:
      - [id, int, id du hamster]
  -
    fct_name: porte_pomme
    fct_summary: Indique si le hamster id porte une pomme
    fct_ret_type: int
    fct_arg:
      - [id, int, id du pomme]
  -
    fct_name: distance
    fct_summary: Renvoie la distance minimale pour aller de (x1,y1) a (x2,y2). ce est calculee en tenant compte des deplacements possibles d'un seul hamster. Cette fonction a un temps de calcul nul. Lorsque sort_tranchee vaut false, la distance est calculee en tenant compte des deplacements possibles d'un seul hamster. Lorsque sort_tranchee vaut true, la distance est calculee comme s'il n'y avait pas de tranchees.
    fct_ret_type: int
    fct_arg:
      - [x1, int, la colonne du premier point]
      - [y1, int, la ligne du premier point]
      - [x2, int, la colonne du second point]
      - [y2, int, la ligne du second point]
      - [sort_tranchee, bool, indique le mode de calcul de la distance]
  -
    fct_name: type_case
    fct_summary: Renvoie le type de la case (x,y) (NORMAL, TRANCHEE ou OBSTACLE)
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: pomme
    fct_summary: Indique s'il y a une pomme non portee sur la case (x,y)
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: trognons_restants
    fct_summary: Renvoie le nombre de trognons de pomme restants du hamster id
    fct_ret_type: int
    fct_arg:
      - [id, int, identifiant du hamster]
  - doc_extra: |
     \subsection{Fonctions d'action}
     Toutes les fonctions peuvent renvoyer les constantes
     \textbf{BAD_ARGUMENT} quand au moins un des
     arguments est incorrect (meme si cela n'est pas precise pour chaque
     fonction), ou \textbf{TOO_MUCH_ORDERS} quand vous avez envoye trop 
     d'ordres a l'un de vos hamsters.
  -
    fct_name: deplacer
    fct_summary: Demande un deplacement du hamster
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre hamster]
    - [direction, int, l'une des quatre directions]
  -
    fct_name: turbo
    fct_summary: Incremente le turbo d'un hamster
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre hamster]
  -
    fct_name: lacher_pomme
    fct_summary: Fait lacher la pomme a votre hamster, dans l'une des cinq directions
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre hamster]
    - [direction, int, l'une des cinq directions vers laquelle vous voulez lacher la pomme]
  -
    fct_name: ramasser_pomme
    fct_summary: Demande a votre hamster de ramasser la pomme sur sa case courante
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre hamster]
  -
    fct_name: grappin
    fct_summary: Demande a votre hamster de lancer le grappin
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre hamster]
    - [direction, int, l'une des quatre directions vers laquelle vous voulez lancer le grappin]
  -
    fct_name: trognon
    fct_summary: Demande a votre hamster id de lancer un trognon dans une direction
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre hamster]
    - [direction, int, l'une des quatre direction vers laquelle vous lancez le trognon]
  -
    fct_name: attendre
    fct_summary: Ordonne a votre hamster de ne rien faire
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre hamster]

user_function:
  - doc_extra: |-
     \subsection{Ce qu'il faut faire}
     Chacun est libre de mener la strategie qui lui semble la plus
     adaptee, et a entière liberte sur la façon de l'implementer.
     Toutefois il est demande d'ecrire deux fonctions en particulier :
     une fonction qui sera appelee au debut de la partie, et une autre
     qui sera appelee a chaque tour.
