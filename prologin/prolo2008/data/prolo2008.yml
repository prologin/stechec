conf:
  package_name: prolo2008
  client_rule_lib: robotus
  server_rule_lib: robotus
  player_lib: champion
  player_filename: prologin

constant:
  - doc_extra: \subsection{Constantes}
  - doc_extra: \subsubsection{Les codes d'erreur}
  -
    cst_name: BAD_ARGUMENT
    cst_val: -1
    cst_comment: Un des arguments passe a la fonction est incorrect.
  -
    cst_name: SUCCESS
    cst_val: 0
    cst_comment: La commande s'est correctement effectuee.
  - doc_extra: \subsubsection{Les constantes de terrain}
  -
    cst_name: NORMAL
    cst_val: 0
    cst_comment: Case de terrain qui n'est ni un trou, ni un mur
  -
    cst_name: TROU
    cst_val: 1
    cst_comment: Trou du terrain
  -
    cst_name: MUR
    cst_val: 2
    cst_comment: Mur du terrain
  - doc_extra: \subsubsection{Les constantes de directions}
  -
    cst_name: HAUT
    cst_val: 0
    cst_comment: 
  -
    cst_name: GAUCHE
    cst_val: 1
    cst_comment: 
  -
    cst_name: BAS
    cst_val: 2
    cst_comment: 
  -
    cst_name: DROITE
    cst_val: 3
    cst_comment: 

function:
  - doc_extra: |
     \subsection{Fonctions d'information}
     Toutes les fonctions peuvent renvoyer les constantes
     \textbf{BAD_ARGUMENT} quand au moins un des
     arguments est incorrect (même si cela n'est pas précisé pour chaque
     fonction). Par exemple, cela se produit si vous appelez
     la fonction \texttt{type_case} avec \texttt{x=13} et \texttt{y=5142}.
  -
    fct_name: numero_tour
    fct_summary: Renvoie le numero du tour
    fct_ret_type: int
  -
    fct_name: nombre_tours
    fct_summary: Renvoie le nombre de tours d'une partie
    fct_ret_type: int
  -
    fct_name: commence
    fct_summary: Fonction pour savoir si on joue en premier ce tour-ci
    fct_ret_type: bool
  -
    fct_name: pos_x
    fct_summary: Renvoie la position x du robot id
    fct_ret_type: int
    fct_arg:
      - [id, int, id du robot]
  -
    fct_name: pos_y
    fct_summary: Renvoie la position y du robot id
    fct_ret_type: int
    fct_arg:
      - [id, int, id du robot]
  -
    fct_name: porte_balle
    fct_summary: Indique si le robot id porte une balle
    fct_ret_type: int
    fct_arg:
      - [id, int, id du robot]
  -
    fct_name: distance
    fct_summary: Renvoie la distance minimale pour aller de (x1,y1) 'a (x2,y2)
    fct_ret_type: int
    fct_arg:
      - [x1, int, la colonne du premier point]
      - [y1, int, la ligne du premier point]
      - [x2, int, la colonne du second point]
      - [y2, int, la ligne du second point]
  -
    fct_name: type_case
    fct_summary: Renvoie le type de la case (x,y) (NORMAL, TROU ou MUR)
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  -
    fct_name: balle
    fct_summary: Indique s'il y a une balle non portée sur la case (x,y)
    fct_ret_type: int
    fct_arg:
      - [x, int, la colonne]
      - [y, int, la ligne]
  - doc_extra: |
     \subsection{Fonctions d'action}
     Toutes les fonctions peuvent renvoyer les constantes
     \textbf{BAD_ARGUMENT} quand au moins un des
     arguments est incorrect (même si cela n'est pas précisé pour chaque
     fonction). Par exemple, cela se produit si vous appelez
     la fonction \texttt{deplacer} avec \texttt{id=1} et \texttt{direction=20}.
  -
    fct_name: deplacer
    fct_summary: Demande un déplacement du robot
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre robot]
    - [direction, int, l'une des quatre directions]
  -
    fct_name: turbo
    fct_summary: Incrémente le turbo d'un robot
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre robot]
  -
    fct_name: lacher_balle
    fct_summary: Fait lacher la balle à votre robot
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre robot]
  -
    fct_name: prendre_balle
    fct_summary: Demande à votre robot de prendre la balle sur sa case courante
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre robot]
  -
    fct_name: grapin
    fct_summary: Demande à votre robot de lancer le grapin
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre robot]
    - [direction, int, la direction vers laquelle vous voulez lancer le grapin]
  -
    fct_name: attendre
    fct_summary: Ordonne à votre robot de ne rien faire
    fct_ret_type: int
    fct_arg:
    - [id, int, l'identifiant de votre robot]

user_function:
  - doc_extra: |-
     \subsection{Ce qu'il faut faire}
     Chacun est libre de mener la stratégie qui lui semble la plus
     adaptée, et a entière liberté sur la façon de l'implémenter.
     Toutefois il est demandé d'écrire deux fonctions en particulier :
     une fonction qui sera appelée au début de la partie, et une autre
     qui sera appelée à chaque tour.
